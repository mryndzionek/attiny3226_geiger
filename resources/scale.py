import math

import numpy as np
from PIL import Image, ImageDraw


def log_scale(x):
    if x == 0:
        return 0
    else:
        return round(math.log10(x / 100) * 128) + 256


min_rate = 1
max_rate = 100000

min_rate_scaled = log_scale(min_rate)
max_rate_scaled = log_scale(max_rate)

start_angle_deg = 180 - 20
end_angle_deg = 20
angle_range_deg = end_angle_deg - start_angle_deg

rotation_center = (0, -10)
tick_len = 8

disp_x = 128
disp_y = 64

needle_len = 64 - 2

# fmt: off
all_rates = [
    0x0000, 0x0000, 0x0027, 0x003D, 0x004D, 0x0059, 0x0064, 0x006C, 0x0074, 0x007A, 0x0080, 0x0085, 0x008A, 0x008F, 0x0093, 0x0097,
    0x009A, 0x009D, 0x00A1, 0x00A4, 0x00A7, 0x00A9, 0x00AC, 0x00AE, 0x00B1, 0x00B3, 0x00B5, 0x00B7, 0x00B9, 0x00BB, 0x00BD, 0x00BF,
    0x00C1, 0x00C2, 0x00C4, 0x00C6, 0x00C7, 0x00C9, 0x00CA, 0x00CC, 0x00CD, 0x00CE, 0x00D0, 0x00D1, 0x00D2, 0x00D4, 0x00D5, 0x00D6,
    0x00D7, 0x00D8, 0x00D9, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
    0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF, 0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
    0x0108, 0x0109, 0x010A, 0x010B, 0x010C, 0x010D, 0x010E, 0x010F, 0x0110, 0x0111, 0x0112, 0x0113, 0x0114, 0x0115, 0x0116, 0x0117,
    0x0118, 0x0119, 0x011A, 0x011B, 0x011C, 0x011D, 0x011E, 0x011F, 0x0120, 0x0121, 0x0122, 0x0123, 0x0124, 0x0125, 0x0126, 0x0127,
    0x0128, 0x0129, 0x012A, 0x012B, 0x012C, 0x012D, 0x012E, 0x012F, 0x0130, 0x0131, 0x0132, 0x0133, 0x0134, 0x0135, 0x0136, 0x0137,
    0x0138, 0x0139, 0x013A, 0x013B, 0x013C, 0x013D, 0x013E, 0x013F, 0x0140, 0x0141, 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x0147,
    0x0148, 0x0149, 0x014A, 0x014B, 0x014C, 0x014D, 0x014E, 0x014F, 0x0150, 0x0151, 0x0152, 0x0153, 0x0154, 0x0155, 0x0156, 0x0157,
    0x0158, 0x0159, 0x015A, 0x015B, 0x015C, 0x015D, 0x015E, 0x015F, 0x0160, 0x0161, 0x0162, 0x0163, 0x0164, 0x0165, 0x0166, 0x0167,
    0x0168, 0x0169, 0x016A, 0x016B, 0x016C, 0x016D, 0x016E, 0x016F, 0x0170, 0x0171, 0x0172, 0x0173, 0x0174, 0x0175, 0x0176, 0x0177,
    0x0178, 0x0179, 0x017A, 0x017B, 0x017C, 0x017D, 0x017E, 0x017F, 0x0180, 0x0181, 0x0182, 0x0183, 0x0184, 0x0185, 0x0186, 0x0187,
    0x0188, 0x0189, 0x018A, 0x018B, 0x018C, 0x018D, 0x018E, 0x018F, 0x0190, 0x0191, 0x0192, 0x0193, 0x0194, 0x0195, 0x0196, 0x0197,
    0x0198, 0x0199, 0x019A, 0x019B, 0x019C, 0x019D, 0x019E, 0x019F, 0x01A0, 0x01A1, 0x01A2, 0x01A3, 0x01A4, 0x01A5, 0x01A6, 0x01A7,
    0x01A8, 0x01A9, 0x01AA, 0x01AB, 0x01AC, 0x01AD, 0x01AE, 0x01AF, 0x01B0, 0x01B1, 0x01B2, 0x01B3, 0x01B4, 0x01B5, 0x01B6, 0x01B7,
    0x01B8, 0x01B9, 0x01BA, 0x01BB, 0x01BC, 0x01BD, 0x01BE, 0x01BF, 0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C4, 0x01C5, 0x01C6, 0x01C7,
    0x01C8, 0x01C9, 0x01CA, 0x01CB, 0x01CC, 0x01CD, 0x01CE, 0x01CF, 0x01D0, 0x01D1, 0x01D2, 0x01D3, 0x01D4, 0x01D5, 0x01D6, 0x01D7,
    0x01D8, 0x01D9, 0x01DA, 0x01DB, 0x01DC, 0x01DD, 0x01DE, 0x01DF, 0x01E0, 0x01E1, 0x01E2, 0x01E3, 0x01E4, 0x01E5, 0x01E6, 0x01E7,
    0x01E8, 0x01E9, 0x01EA, 0x01EB, 0x01EC, 0x01ED, 0x01EE, 0x01EF, 0x01F0, 0x01F1, 0x01F2, 0x01F3, 0x01F4, 0x01F5, 0x01F6, 0x01F7,
    0x01F8, 0x01F9, 0x01FA, 0x01FB, 0x01FC, 0x01FD, 0x01FE, 0x01FF, 0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207,
    0x0208, 0x0209, 0x020A, 0x020B, 0x020C, 0x020D, 0x020E, 0x020F, 0x0210, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217,
    0x0218, 0x0219, 0x021A, 0x021B, 0x021C, 0x021D, 0x021E, 0x021F, 0x0220, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226, 0x0227,
    0x0228, 0x0229, 0x022A, 0x022B, 0x022C, 0x022D, 0x022E, 0x022F, 0x0230, 0x0231, 0x0232, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
    0x0238, 0x0239, 0x023A, 0x023B, 0x023C, 0x023D, 0x023E, 0x023F, 0x0240, 0x0241, 0x0242, 0x0243, 0x0244, 0x0245, 0x0246, 0x0247,
    0x0248, 0x0249, 0x024A, 0x024B, 0x024C, 0x024D, 0x024E, 0x024F, 0x0250, 0x0251, 0x0252, 0x0253, 0x0254, 0x0255, 0x0256, 0x0257,
    0x0258, 0x0259, 0x025A, 0x025B, 0x025C, 0x025D, 0x025E, 0x025F, 0x0260, 0x0261, 0x0262, 0x0263, 0x0264, 0x0265, 0x0266, 0x0267,
    0x0268, 0x0269, 0x026A, 0x026B, 0x026C, 0x026D, 0x026E, 0x026F, 0x0270, 0x0271, 0x0272, 0x0273, 0x0274, 0x0275, 0x0276, 0x0277,
    0x0278, 0x0279, 0x027A, 0x027B, 0x027C, 0x027D, 0x027E, 0x027F, 0x0280,
]
# fmt: on


def rate_to_angle(x, scale=True):
    if scale:
        x = log_scale(x)
    if x == 0:
        return start_angle_deg
    else:
        return start_angle_deg + (angle_range_deg * x / log_scale(max_rate))


def angle_to_xy(a, r):
    x = r * math.cos(math.radians(a)) + rotation_center[0]
    y = r * math.sin(math.radians(a)) + rotation_center[1]
    return (round(x), round(y))


def xy_to_img(xy):
    return round(xy[0] + (disp_x / 2) - 1), round(disp_y - xy[1] - 1 - 5)


def print_hex_array(data):
    lines = [data[i : i + 16] for i in range(0, len(data), 16)]
    for line in lines:
        line_str = ", ".join(map(lambda x: "0x{:02X}".format(x), line))
        print("    " + line_str + ",")


tick_rates = [
    1,
    2,
    5,
    10,
    20,
    50,
    100,
    200,
    500,
    1000,
    2000,
    5000,
    10000,
    20000,
    50000,
    100000,
]
tick_angles_deg = list(map(rate_to_angle, tick_rates))

tick_xy_starts = list(
    map(
        lambda x: angle_to_xy(
            x[0], needle_len - (tick_len if (x[1] % 3) == 0 else (tick_len / 2))
        ),
        zip(tick_angles_deg, range(len(tick_angles_deg))),
    )
)
tick_xy_disp_starts = list(map(xy_to_img, tick_xy_starts))

tick_xy_ends = list(map(lambda x: angle_to_xy(x, needle_len), tick_angles_deg))
tick_xy_disp_ends = list(map(xy_to_img, tick_xy_ends))

# print(tick_angles_deg)
print(tick_xy_ends)
print(tick_xy_disp_starts)
print(tick_xy_disp_ends)

img = Image.new("1", (disp_x, disp_y))
canvas = ImageDraw.Draw(img)
for c in zip(tick_xy_disp_starts, tick_xy_disp_ends):
    canvas.line(c, fill=1)

all_angles_deg = list(map(lambda x: rate_to_angle(x, False), all_rates))
all_xy_starts = list(map(lambda x: angle_to_xy(x, 25), all_angles_deg))
all_xy_ends = list(map(lambda x: angle_to_xy(x, needle_len), all_angles_deg))
all_xy_disp_starts = list(map(xy_to_img, all_xy_starts))
all_xy_disp_ends = list(map(xy_to_img, all_xy_ends))

# print(all_angles_deg)

canvas.line((all_xy_disp_starts[5], all_xy_disp_ends[5]), fill=1)

img.save("analog.png")

print(f"static const uint8_t needle1_x[LOG_LUT_LEN] = {{")
print_hex_array(list(map(lambda x: x[0], all_xy_disp_starts)))
print("};\n")

print(f"static const uint8_t needle1_y[LOG_LUT_LEN] = {{")
print_hex_array(list(map(lambda x: x[1], all_xy_disp_starts)))
print("};\n")

print(f"static const uint8_t needle2_x[LOG_LUT_LEN] = {{")
print_hex_array(list(map(lambda x: x[0], all_xy_disp_ends)))
print("};\n")

print(f"static const uint8_t needle2_y[LOG_LUT_LEN] = {{")
print_hex_array(list(map(lambda x: x[1], all_xy_disp_ends)))
print("};\n")

print(f"static const uint8_t ticks1_x[{len(tick_xy_disp_starts)}] = {{")
print_hex_array(list(map(lambda x: x[0], tick_xy_disp_starts)))
print("};\n")

print(f"static const uint8_t ticks1_y[{len(tick_xy_disp_starts)}] = {{")
print_hex_array(list(map(lambda x: x[1], tick_xy_disp_starts)))
print("};\n")

print(f"static const uint8_t ticks2_x[{len(tick_xy_disp_ends)}] = {{")
print_hex_array(list(map(lambda x: x[0], tick_xy_disp_ends)))
print("};\n")

print(f"static const uint8_t ticks2_y[{len(tick_xy_disp_ends)}] = {{")
print_hex_array(list(map(lambda x: x[1], tick_xy_disp_ends)))
print("};\n")

print(f"#define ORANGE_THRESHOLD_ANGLE ({round(rate_to_angle(50) * 256 / 360)})")
print(f"#define RED_THRESHOLD_ANGLE ({round(rate_to_angle(1000) * 256 / 360)})")
print(f"#define MAX_RATE_THRESHOLD_ANGLE ({round(rate_to_angle(100000) * 256 / 360)})")
